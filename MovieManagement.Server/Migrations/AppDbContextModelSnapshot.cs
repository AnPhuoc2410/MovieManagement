// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieManagement.Server.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MovieManagement.Server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MovieManagement.Server.Models.Entities.Bill", b =>
                {
                    b.Property<Guid>("BillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(10,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Point")
                        .HasColumnType("numeric(10,2)");

                    b.Property<Guid>("PromotionId")
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("Showtime")
                        .HasColumnType("interval");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TotalTicket")
                        .HasColumnType("integer");

                    b.HasKey("BillId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("MemberId");

                    b.HasIndex("MovieId");

                    b.HasIndex("PromotionId");

                    b.ToTable("BILL", (string)null);
                });

            modelBuilder.Entity("MovieManagement.Server.Models.Entities.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("varchar(20)");

                    b.HasKey("CategoryId");

                    b.ToTable("CATEGORY", (string)null);
                });

            modelBuilder.Entity("MovieManagement.Server.Models.Entities.CategoryDetail", b =>
                {
                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.HasKey("MovieId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("CATEGORYDETAIL", (string)null);
                });

            modelBuilder.Entity("MovieManagement.Server.Models.Entities.Employee", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("IDCard")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(11)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("EmployeeId");

                    b.ToTable("EMPLOYEE", (string)null);
                });

            modelBuilder.Entity("MovieManagement.Server.Models.Entities.Member", b =>
                {
                    b.Property<Guid>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("IDCard")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(11)");

                    b.Property<decimal>("Point")
                        .HasColumnType("numeric");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("MemberId");

                    b.ToTable("MEMBER", (string)null);
                });

            modelBuilder.Entity("MovieManagement.Server.Models.Entities.Movie", b =>
                {
                    b.Property<Guid>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Actors")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Trailer")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("MovieId");

                    b.ToTable("MOVIE", (string)null);
                });

            modelBuilder.Entity("MovieManagement.Server.Models.Entities.Promotion", b =>
                {
                    b.Property<Guid>("PromotionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Discount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PromotionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("PromotionId");

                    b.ToTable("PROMOTION", (string)null);
                });

            modelBuilder.Entity("MovieManagement.Server.Models.Entities.Room", b =>
                {
                    b.Property<Guid>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2)
                        .HasColumnType("uuid");

                    b.Property<int>("Column")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Row")
                        .HasColumnType("integer");

                    b.Property<int>("Total")
                        .HasColumnType("integer");

                    b.HasKey("RoomId");

                    b.ToTable("ROOM", (string)null);
                });

            modelBuilder.Entity("MovieManagement.Server.Models.Entities.Seat", b =>
                {
                    b.Property<Guid>("SeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("varchar(1)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("SeatId");

                    b.HasIndex("RoomId");

                    b.ToTable("SEAT", (string)null);
                });

            modelBuilder.Entity("MovieManagement.Server.Models.Entities.ShowTime", b =>
                {
                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval");

                    b.HasKey("MovieId", "RoomId");

                    b.HasIndex("RoomId");

                    b.ToTable("SHOWTIME", (string)null);
                });

            modelBuilder.Entity("MovieManagement.Server.Models.Entities.TicketDetail", b =>
                {
                    b.Property<Guid>("BillId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SeatId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TicketTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("BillId", "SeatId");

                    b.HasIndex("SeatId");

                    b.HasIndex("TicketTypeId");

                    b.ToTable("TICKETDETAIL", (string)null);
                });

            modelBuilder.Entity("MovieManagement.Server.Models.Entities.TicketType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Consumer")
                        .HasColumnType("integer");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer");

                    b.Property<int>("Hours")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasPrecision(18)
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("TICKETTYPE", (string)null);
                });

            modelBuilder.Entity("MovieManagement.Server.Models.Entities.Bill", b =>
                {
                    b.HasOne("MovieManagement.Server.Models.Entities.Employee", "Employee")
                        .WithMany("Bills")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieManagement.Server.Models.Entities.Member", "Member")
                        .WithMany("Bills")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieManagement.Server.Models.Entities.Movie", "Movie")
                        .WithMany("Bills")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieManagement.Server.Models.Entities.Promotion", "Promotion")
                        .WithMany("Bills")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Member");

                    b.Navigation("Movie");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("MovieManagement.Server.Models.Entities.CategoryDetail", b =>
                {
                    b.HasOne("MovieManagement.Server.Models.Entities.Category", "Category")
                        .WithMany("CategoryDetails")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieManagement.Server.Models.Entities.Movie", "Movie")
                        .WithMany("CategoryDetails")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MovieManagement.Server.Models.Entities.Seat", b =>
                {
                    b.HasOne("MovieManagement.Server.Models.Entities.Room", "Room")
                        .WithMany("Seats")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("MovieManagement.Server.Models.Entities.ShowTime", b =>
                {
                    b.HasOne("MovieManagement.Server.Models.Entities.Movie", "Movie")
                        .WithMany("Showtimes")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieManagement.Server.Models.Entities.Room", "Room")
                        .WithMany("Showtimes")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("MovieManagement.Server.Models.Entities.TicketDetail", b =>
                {
                    b.HasOne("MovieManagement.Server.Models.Entities.Bill", "Bill")
                        .WithMany("TicketDetails")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieManagement.Server.Models.Entities.Seat", "Seat")
                        .WithMany("TicketDetail")
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieManagement.Server.Models.Entities.TicketType", "TicketType")
                        .WithMany("TicketDetails")
                        .HasForeignKey("TicketTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("Seat");

                    b.Navigation("TicketType");
                });

            modelBuilder.Entity("MovieManagement.Server.Models.Entities.Bill", b =>
                {
                    b.Navigation("TicketDetails");
                });

            modelBuilder.Entity("MovieManagement.Server.Models.Entities.Category", b =>
                {
                    b.Navigation("CategoryDetails");
                });

            modelBuilder.Entity("MovieManagement.Server.Models.Entities.Employee", b =>
                {
                    b.Navigation("Bills");
                });

            modelBuilder.Entity("MovieManagement.Server.Models.Entities.Member", b =>
                {
                    b.Navigation("Bills");
                });

            modelBuilder.Entity("MovieManagement.Server.Models.Entities.Movie", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("CategoryDetails");

                    b.Navigation("Showtimes");
                });

            modelBuilder.Entity("MovieManagement.Server.Models.Entities.Promotion", b =>
                {
                    b.Navigation("Bills");
                });

            modelBuilder.Entity("MovieManagement.Server.Models.Entities.Room", b =>
                {
                    b.Navigation("Seats");

                    b.Navigation("Showtimes");
                });

            modelBuilder.Entity("MovieManagement.Server.Models.Entities.Seat", b =>
                {
                    b.Navigation("TicketDetail");
                });

            modelBuilder.Entity("MovieManagement.Server.Models.Entities.TicketType", b =>
                {
                    b.Navigation("TicketDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
